import { PrismaClient } from '@prisma/client'
import { describe, expect, it } from 'vitest'
const prisma = new PrismaClient()

describe('My Prisma API', () => {
  it('should be able to create a user', async () => {
    // Arrange
    const name = 'John Doe'
    const password = 'password123'
    const avatar = 'https://example.com/avatar.png'

    // Act
    const user = await prisma.users.create({
      name,
      password,
      avatar,
    })

    // Assert
    expect(user).toBeDefined()
    expect(user.name).toEqual(name)
    expect(user.password).toEqual(password)
    expect(user.avatar).toEqual(avatar)
  })

  it('should be able to get a user by ID', async () => {
    // Arrange
    const userId = 1

    // Act
    const user = await prisma.users.findOne({ id: userId })

    // Assert
    expect(user).toBeDefined()
    expect(user.id).toEqual(userId)
  })

  it('should be able to update a user', async () => {
    // Arrange
    const userId = 1
    const newName = 'Jane Doe'

    // Act
    const user = await prisma.users.update({
      id: userId,
      name: newName,
    })

    // Assert
    expect(user).toBeDefined()
    expect(user.id).toEqual(userId)
    expect(user.name).toEqual(newName)
  })

  it('should be able to delete a user', async () => {
    // Arrange
    const userId = 1

    // Act
    await prisma.users.delete({ id: userId })

    // Assert
    try {
      await prisma.users.findOne({ id: userId })
      fail('Expected to get an error')
    }
    catch (error) {
      expect(error.message).toEqual('Record not found')
    }
  })
})
